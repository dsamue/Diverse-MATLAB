function [ diffVector ] = huffmanDecoder( binaryVector, CodeBook) %Add CodeBook as input argument
%%
% This function decodes a single binary vector into a black n white image 
% Input: a binary vector formed by concatenated huffman codewords
%           representing a Y frame
%          codebook, generated by huffmanCodebook

% Output: decoded image, Black and White, type uint8
% You can add the input/output arguments if needed.
%%
binaryVector=(bin2dec(binaryVector))';  %Convert from bin to double

A = cellfun('length', CodeBook); 
% return a vector with length of every element in Codebook
minHuff = min(A(:,2));
% return the minimum length of a huffmancode

diffVector=[];                         %Empty vector (output)

while numel(binaryVector) ~= 0         %For all elements..
        found=0;                       %Found = False 
        tempVec=[];
        
        while found == 0 && numel(binaryVector) ~= 0
            tempVec=[tempVec binaryVector(1)]; 
            %add value from binVec totempVec
            binaryVector=binaryVector(2:end);  
            %..and removes that value
            
            if length(tempVec) >= minHuff 
       %only searches through Codebook when tempVec is longer than minHuff
          
                for n =1:size(CodeBook,1)     %look for tempvec in codebook
                    if isequal(tempVec, CodeBook{n,2})       %when found..
                        diffVector=[diffVector CodeBook{n,1}];
                        %add to difVec
                        found = 1;                            %Found = True
                        break                                 %Back to top 
                    end
                end
                
            end
            
        end
end
